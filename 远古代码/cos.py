#分组为（17，18）（1，2）（2，3）（3，4）（1，5）（5，6）（6，7）（1，8）（8，9）（9，10）（10，11）（8，12）（12，13）（13，14）（11，22）（14，19）
import math


points_2=[602.5905151367188, 191.45567321777344, 0.8917112350463867, 612.6652526855469, 453.3987731933594, 0.6805730164051056, 401.0958251953125, 460.1152648925781, 0.6439347863197327, 347.3639221191406, 706.9462890625, 0.02516336552798748, 616.0234985351562, 164.58970642089844, 0.003592587308958173, 824.2346801757812, 446.6822814941406, 0.7172112464904785, 891.3995971679688, 706.9462890625, 0.08700770884752274, 703.337890625, 209.92601013183594, 0.00427547050639987, 508.5596618652344, 156.194091796875, 0.0023516854271292686, 844.3841552734375, 451.7196350097656, 0.00274369353428483, 542.14208984375, 204.88864135742188, 0.0030488355550915003, 629.4564819335938, 317.3898620605469, 0.0025082137435674667, 542.14208984375, 196.4930419921875, 0.0038366273511201143, 535.4255981445312, 142.76112365722656, 0.008723448030650616, 555.5750732421875, 151.15673828125, 0.8760987520217896, 649.60595703125, 142.76112365722656, 0.8544571995735168, 495.126708984375, 196.4930419921875, 0.848799467086792, 710.0543823242188, 169.62709045410156, 0.8892040848731995]
points_1=[610.4645385742188, 191.4345245361328, 0.885962963104248, 
613.8232116699219, 455.9296569824219, 0.6775527000427246, 
395.509765625, 465.1659851074219, 0.6476061344146729, 
348.4884033203125, 706.9901123046875, 0.02146838791668415,
617.181884765625, 164.56517028808594, 0.003695327090099454, 
832.1366577148438, 446.6933288574219, 0.7074992656707764, 
885.8753662109375, 706.9901123046875, 0.06435858458280563, 
704.5072631835938, 209.90719604492188, 0.003977342043071985, 
529.8565063476562, 218.30386352539062, 0.0031696450896561146,
845.5712890625, 451.7313232421875, 0.001957008382305503, 
550.0084838867188, 196.47251892089844, 0.0028469895478338003, 
630.6165161132812, 317.38458251953125, 0.0028597391210496426, 
509.7044982910156, 236.7765350341797, 0.0038976771757006645, 
536.5738525390625, 151.1304931640625, 0.009843491949141026, 
556.725830078125, 156.1685028076172, 0.8538870215415955, 
650.7685546875, 142.7338409423828, 0.8709740042686462, 
496.26983642578125, 204.86920166015625, 0.8589417934417725, 
711.224609375, 177.99984741210938, 0.8845877647399902]
#我查了一下这个是之前用的coco的结果是18个点，以后尽量用body25
#解读：3n对应第n点的x，3n+1对应第N点的y，3n+2对应第n点的可信度，可信度后面可以用来作为权重，但是点可信度转换边可信度转化余弦可信度需要思考一下怎么做。
#判断一对儿对应边之间的余弦相似度
def apair(x1,y1,x2,y2,x3,y3,x4,y4):
	kx=x1/x3
	ky=y1/y3
	x2=kx*x4-x1
	y2=ky*y4-y1
	x1=x2-x1;y1=y2-y1
	return (x1*x2+y1*y2)/(math.sqrt(x1*x1+y1*y1)*math.sqrt(x2*x2+y2*y2))
def find_value(a,b,c,d):
	return apair(3*a,(3*a+1),3*b,(3*b+1),3*c,(3*c+1),3*d,(3*d+1))
#所有的边余弦相似度的平均值
def allpair(points_1,points_2):
	find_value(points_1[1],points_1[2],points_2[1],points_2[2])#此处输入四个点在图片上的对应关系就好，前两个一对，后两个一对。例子是计算1，2两点连线
    #进行16对边的findvalue，得到16个余弦相似度。
